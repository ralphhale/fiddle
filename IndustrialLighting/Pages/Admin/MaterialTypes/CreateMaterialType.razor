@page "/materialtype"
@using FluentValidation.Results
@using IndustrialLighting.Domain.Exceptions
@using IndustrialLighting.Domain.Services
@using IndustrialLighting.Domain.Validations.Extensions
@using IndustrialLighting.Persistence.Entities

@inject NavigationManager navigationManager
@inject MaterialTypeService materialTypeService
@inject ISnackbar snackbarService

<PageTitle>Create a Material Type</PageTitle>

<MudText Typo="Typo.h2">Create a Material Type</MudText>

<MudText Typo="Typo.body1">Specify the material type properties and click save</MudText>

<MudGrid Class="mt-8">
    <MudItem xs="12" sm="8" md="6">
        <MudTextField @bind-Value="materialType.Name" Label="Material Type Name" Variant="Variant.Outlined"></MudTextField>
        @if (Errors.HasError(nameof(MaterialType.Name)))
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@Errors.ErrorMessage(nameof(MaterialType.Name))</MudAlert>
        }
    </MudItem>
</MudGrid>

<MudGrid Class="mt-8">
    <MudItem xs="12" sm="4" md="3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSaveClick" Disabled="@(!canSave)" FullWidth="true">Save</MudButton>
    </MudItem>
    <MudItem xs="12" sm="4" md="3">
       <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/materialtypes" Disabled="@(!canCancel)" FullWidth="true">@cancelTtext</MudButton>
    </MudItem>
</MudGrid>


@code {
    private bool canSave = true;
    private bool canCancel = true;
    private string cancelTtext = "Cancel";
    private MaterialType materialType = new();
    private List<ValidationFailure> Errors = new();

    private async Task OnSaveClick()
    {
        try
        {
            canSave = false;
            canCancel = false;
            Errors.Clear();

            await materialTypeService.CreateAsync(materialType.Name);

            snackbarService.Add($"Material type {materialType.Name} was added successfully", Severity.Success);

            canCancel = true;
            cancelTtext = "Close";
        }
        catch (ValidatorException vex)
        {
            Errors = vex.Errors;

            canSave = true;
            canCancel = true;
        }
        catch (Exception ex)
        {
            snackbarService.Add(ex.Message, Severity.Error);

            canSave = true;
            canCancel = true;
        }
    }
}
