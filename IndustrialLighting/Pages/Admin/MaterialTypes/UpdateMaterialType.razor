@page "/materialtype/{id:int}"
@using FluentValidation.Results
@using IndustrialLighting.Domain.Exceptions
@using IndustrialLighting.Domain.Services
@using IndustrialLighting.Domain.Validations.Extensions
@using IndustrialLighting.Persistence.Entities

@inject NavigationManager navigationManager
@inject MaterialTypeService materialTypeService
@inject ISnackbar snackbarService

<PageTitle>Update a Material Type</PageTitle>

<MudText Typo="Typo.h2">Update a Material Type</MudText>

<MudText Typo="Typo.body1">Specify the material type properties and click save</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Success" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudGrid Class="mt-8">
        <MudItem xs="12" sm="8" md="6">
            <MudTextField @bind-Value="materialType.Name" Label="Material Type Name" Variant="Variant.Outlined"></MudTextField>
            @if (Errors.HasError(nameof(MaterialType.Name)))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@Errors.ErrorMessage(nameof(MaterialType.Name))</MudAlert>
            }
        </MudItem>
    </MudGrid>

    <MudGrid Class="mt-8">
        <MudItem xs="12" sm="4" md="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSaveClick" Disabled="@(!canSave)" FullWidth="true">Save</MudButton>
        </MudItem>
        <MudItem xs="12" sm="4" md="3">
           <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/materialtypes" Disabled="@(!canCancel)" FullWidth="true">@cancelTtext</MudButton>
        </MudItem>
    </MudGrid>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private bool canSave = true;
    private bool canCancel = true;
    private string cancelTtext = "Cancel";
    private bool isLoading = true;
    private MaterialType materialType = new();
    private List<ValidationFailure> Errors = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var item = await materialTypeService.GetAsync(Id);

        // rph: not sure why I need to do this but EF is doing some strange magic if you modify the entity in the form
        materialType = item.Clone();

        isLoading = false;
    }

    private async Task OnSaveClick()
    {
        try
        {
            canSave = false;
            canCancel = false;
            Errors.Clear();

            await materialTypeService.UpdateAsync(materialType);

            snackbarService.Add($"Material type {materialType.Name} was updated successfully", Severity.Success);

            canCancel = true;
            cancelTtext = "Close";
        }
        catch (ValidatorException vex)
        {
            Errors = vex.Errors;

            canSave = true;
            canCancel = true;
        }
        catch (Exception ex)
        {
            snackbarService.Add(ex.Message, Severity.Error);

            canSave = true;
            canCancel = true;
        }
    }
}
