@page "/material/{id:int}"
@using FluentValidation.Results
@using IndustrialLighting.Domain.Exceptions
@using IndustrialLighting.Domain.Services
@using IndustrialLighting.Domain.Validations.Extensions
@using IndustrialLighting.Persistence.Entities

@inject NavigationManager navigationManager
@inject MaterialService materialService
@inject MaterialTypeService materialTypeService
@inject ISnackbar snackbarService


<PageTitle>Update Material</PageTitle>

<MudText Typo="Typo.h2">Update Material</MudText>

<MudText Typo="Typo.body1">Specify the material properties and click save</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Success" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudGrid Class="mt-8">
        <MudItem xs="12" sm="8" md="6">
            <MudSelect T="MaterialType" Label="Material Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@material.Type">
                @foreach (var materialType in materialTypes)
                {
                    <MudSelectItem T="MaterialType" Value="materialType">@materialType.Name</MudSelectItem>
                }
            </MudSelect>
            @if (Errors.HasError(nameof(Material.TypeId)))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@Errors.ErrorMessage(nameof(Material.TypeId))</MudAlert>
            }
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.Xs" sm="4" md="6">&nbsp;</MudHidden>

        <MudItem xs="12" sm="8" md="6">
            <MudTextField @bind-Value="material.Name" Label="Material Name" Variant="Variant.Outlined"></MudTextField>
            @if (Errors.HasError(nameof(Material.Name)))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@Errors.ErrorMessage(nameof(Material.Name))</MudAlert>
            }
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.Xs" sm="4" md="6">&nbsp;</MudHidden>

        <MudItem xs="12" sm="8" md="6">
            <MudTextField @bind-Value="material.Price" Label="Material Price" Variant="Variant.Outlined"></MudTextField>
            @if (Errors.HasError(nameof(Material.Price)))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="my-2">@Errors.ErrorMessage(nameof(Material.Price))</MudAlert>
            }
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.Xs" sm="4" md="6"/>
    </MudGrid>

    <MudGrid Class="mt-8">
        <MudItem xs="12" sm="4" md="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSaveClick" Disabled="@(!canSave)" FullWidth="true">Save</MudButton>
        </MudItem>
        <MudItem xs="12" sm="4" md="3">
           <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/materials" Disabled="@(!canCancel)" FullWidth="true">@cancelTtext</MudButton>
        </MudItem>
    </MudGrid>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private bool canSave = true;
    private bool canCancel = true;
    private string cancelTtext = "Cancel";
    private bool isLoading = true;
    private Material material = new();
    private List<MaterialType> materialTypes = new();
    private List<ValidationFailure> Errors = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        materialTypes = await materialTypeService.ListAsync();

        var item = await materialService.GetAsync(Id);

        // rph: not sure why I need to do this but EF is doing some strange magic if you modify the entity in the form
        material = item.Clone();

        material.Type = materialTypes.FirstOrDefault(item => item.Id == material.TypeId);

        isLoading = false;

        StateHasChanged();
    }

    private async Task OnSaveClick()
    {
        try
        {
            canSave = false;
            canCancel = false;
            Errors.Clear();

            // we bind the dropdown the the Type model of the material entity, but use the TypeId in the update 
            material.TypeId = material.Type?.Id ?? 0;

            await materialService.UpdateAsync(material);

            snackbarService.Add($"Material {material.Name} was updated successfully", Severity.Success);

            canCancel = true;
            cancelTtext = "Close";
        }
        catch (ValidatorException vex)
        {
            Errors = vex.Errors;

            canSave = true;
            canCancel = true;
        }
        catch (Exception ex)
        {
            snackbarService.Add(ex.Message, Severity.Error);

            canSave = true;
            canCancel = true;
        }
    }
}
