@page "/materialtypes"
@using FluentValidation.Results
@using IndustrialLighting.Domain.Exceptions
@using IndustrialLighting.Domain.Services
@using IndustrialLighting.Pages.Admin.MaterialTypes.Components
@using IndustrialLighting.Persistence.Entities

@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject MaterialTypeService materialTypeService
@inject ISnackbar snackbarService

<PageTitle>Material Types</PageTitle>

<MudText Typo="Typo.h2">Material Types</MudText>

<MudText Typo="Typo.body1">Manage your list of material type categories here</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Success" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudButton Class="mt-8 mb-8" Variant="Variant.Filled" Color="Color.Primary" Href="/materialtype">Create a Material Type</MudButton>

    <MudTable Items="@materialTypes" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" T="MaterialType">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Edit</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <MudIconButton Href=@($"/materialtype/{context.Id}") Icon="@Icons.Custom.Uncategorized.Bacteria" Size="Size.Large" Color="Color.Warning"></MudIconButton>
            </MudTd>
            <MudTd>
                <MudIconButton OnClick="@(e => OnDeleteClicked(context))" Icon="@Icons.Custom.Uncategorized.Radioactive" Size="Size.Large" Color="Color.Error"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private bool isLoading = true;
    private List<MaterialType>? materialTypes;
    private MudTable<MaterialType> mudTable;
    private List<ValidationFailure> Errors = new();

    protected override async Task OnInitializedAsync()
    {
        materialTypes = await materialTypeService.ListAsync();

        isLoading = false;
    }

    private async Task OnDeleteClicked(MaterialType materialType) {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true 
        };

        var dialogReference = dialogService.Show<ConfirmDeleteDialog>("", options);

        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Canceled) 
        {
            try
            {
                await materialTypeService.DeleteAsync(materialType.Id);

                snackbarService.Add($"Material type {materialType.Name} was deleted successfully", Severity.Success);

                materialTypes = await materialTypeService.ListAsync();
            }
            catch (ValidatorException vex)
            {
                Errors = vex.Errors;
            }
            catch (Exception ex)
            {
                snackbarService.Add(ex.Message, Severity.Error);
            }
        }
    }
}
