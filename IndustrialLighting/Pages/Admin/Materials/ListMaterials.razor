@page "/materials"
@using FluentValidation.Results
@using IndustrialLighting.Domain.Exceptions
@using IndustrialLighting.Domain.Services
@using IndustrialLighting.Pages.Admin.Materials.Components
@using IndustrialLighting.Persistence.Entities

@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject MaterialService materialService
@inject ISnackbar snackbarService

<PageTitle>Materials</PageTitle>

<MudText Typo="Typo.h2">Materials</MudText>

<MudText Typo="Typo.body1">Manage your list of materials here</MudText>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Success" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudButton Class="mt-8 mb-8" Variant="Variant.Filled" Color="Color.Primary" Href="/material">Create Material</MudButton>

    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudTable Items="@materials" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" T="Material" Filter="new Func<Material, bool>(FilterFunction)">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchText" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Material, object>(item => item.Type?.Name ?? string.Empty)">Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Material, object>(item => item.Name)">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Material, object>(item => item.Price)">Price</MudTableSortLabel></MudTh>
                <MudTh>Edit</MudTh>
                <MudTh>Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type">@context.Type?.Name</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Price">$@context.Price</MudTd>
                <MudTd>
                    <MudIconButton Href=@($"/material/{context.Id}") Icon="@Icons.Custom.Uncategorized.Bacteria" Size="Size.Large" Color="Color.Warning"></MudIconButton>
                </MudTd>
                <MudTd>
                    <MudIconButton OnClick="@(e => OnDeleteClicked(context))" Icon="@Icons.Custom.Uncategorized.Radioactive" Size="Size.Large" Color="Color.Error"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudList>
            @foreach (var context in materials)
            { 
                <MudListItem>
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@context.Type?.Name</MudText>
                            <MudText Typo="Typo.h6">@context.Name</MudText>
                            <MudText Typo="Typo.body1">$@context.Price</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Href=@($"/material/{context.Id}") Variant="Variant.Outlined" StartIcon="@Icons.Custom.Uncategorized.Bacteria" Color="Color.Warning">Edit</MudButton>
                            <MudButton OnClick="@(e => OnDeleteClicked(context))" Class="ml-8" Variant="Variant.Outlined" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Error" Size="Size.Medium">Delete</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudListItem>
            }
        </MudList>
    </MudHidden>
}

@code {
    private bool isLoading = true;
    private List<Material>? materials;
    private MudTable<Material> mudTable;
    private List<ValidationFailure> Errors = new();
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        materials = await materialService
            .ListAsync();

        isLoading = false;
    }

    private async Task OnDeleteClicked(Material material) 
    {
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true 
        };

        var dialogReference = dialogService.Show<ConfirmDeleteDialog>("", options);

        var dialogResult = await dialogReference.Result;

        if (!dialogResult.Canceled) 
        {
            try
            {
                await materialService.DeleteAsync(material.Id);

                snackbarService.Add($"Material {material.Name} was deleted successfully", Severity.Success);

                materials = await materialService.ListAsync();
            }
            catch (ValidatorException vex)
            {
                Errors = vex.Errors;
            }
            catch (Exception ex)
            {
                snackbarService.Add(ex.Message, Severity.Error);
            }
        }
    }

    private bool FilterFunction(Material element)
    {
        var materialName = element.Name;
        var materialTypeName = element.Type?.Name ?? "";

        if (string.IsNullOrWhiteSpace(searchText))
            return true;
        if (materialName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            return true;
        if (materialTypeName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
